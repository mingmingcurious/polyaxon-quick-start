version: 1.1
kind: component
name: build
tags: [build-from-job]

inputs:
  - {name: custom_model_path, type: str, value: flask-serving, isOptional: true}
  - {name: dockerfile_path, type: str, value: "dockerfile/Dockerfile", isOptional: true}
  - {name: image_project, type: str, value: polyaxon, isOptional: true}
  - {name: image_name, type: str, value: flask-serving, isOptional: true}
  - {name: image_tag, type: str, value: "1.0.0", isOptional: true}
  - {name: plx_sys_s3_name, type: str, value: s3-dbybucket-mlops-plx , isOptional: true}
  - {name: plx_data_s3_name, type: str, value: s3-dbybucket-mlops, isOptional: true}
  - {name: image_hostname, type: str, value: "image.io", isOptional: true}
  - {name: image_hostname_ip, type: str, value: "172.16.1.33", isOptional: true}
  - {name: destination, type: image, connection: registry-polyaxon, isOptional: true}
  

run:
  kind: job
  connections:
    - "{{ params.destination.connection }}"
  environment:
    hostAliases:
    - ip: "{{ image_hostname_ip }}"
      hostnames:
      - "{{ image_hostname }}"
  init:
  - connection: "{{ plx_data_s3_name }}" 
    artifacts:
      #训练输出的模型文件夹拷贝
      dirs: 
      - ["{{ custom_model_path }}", "{{ globals.artifacts_path }}/model/"]
      files:
      - ["{{ Dockerfile_path }}", "{{ globals.artifacts_path }}/Dockerfile"]
  - connection: "{{ plx_data_s3_name }}"  
    artifacts:
      #构建镜像的Dockerfile
     
  container:
    image: gcr.io/kaniko-project/executor:latest
    imagePullPolicy: IfNotPresent
    args: [
      "-c",
      "{{ globals.artifacts_path }}",
      "-d",
      "{{ (connections[params.destination.connection].url + '/'+ image_project  +'/'+ image_name + ':' + image_tag) }}",
      "--cache",
      "--skip-tls-verify=true",
      "--insecure=true"
    ]
