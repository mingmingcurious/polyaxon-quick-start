version: 1.1
kind: operation
name: build
params:
  destination:
    #docker仓库连接，镜像构建完成后推送到这个仓库
    connection: registry-polyaxon
    value: polyaxon/flask-serving:1.0.0
  context:
    value: "{{ globals.artifacts_path }}"
  image-name:
    value: flask-serving
  image-tag:
    value: "1.0.0"
  job-uuid:
    value: 70a129430d3c4a91b41dbe902ec02b3d
  plx-sys-s3-name:
    value: s3-dbybucket-mlops-plx
  plx-data-s3-name:
    value: s3-dbybucket-mlops
runPatch:
  #指定域名解析
  environment:
    hostAliases:
    - ip: "172.16.1.33"
      hostnames:
      - "image.io"
  init:
  - connection: "{{ params.plx-sys-s3-name.value }}" 
    artifacts:
      #训练输出
      dirs: 
      - ["{{ params.job-uuid.value }}/outputs/", "{{ globals.artifacts_path }}/outputs/"]
  - connection: "{{ params.plx-data-s3-name.value }}" 
    artifacts:
      #构建镜像的Dockerfile
      files:
      - ["dockerfile/Dockerfile", "{{ globals.artifacts_path }}/Dockerfile"]
hubRef: kaniko
#下面的component是指定了kaniko后polyaxon默认添加的，我拷贝过来同样可以用，
#并且增加了 - '--skip-tls-verify=true' 和 - '--insecure=true'，解决harbor没有配置https的问题
component:
  version: 1.1
  kind: component
  name: my-kaniko
  tags:
    - build-from-job
  inputs:
    - name: context
      type: str
    - name: job-uuid
      type: str
      isOptional: true
    - name: image-name
      type: str
      isOptional: true
    - name: image-tag
      type: str
      isOptional: true  
    - name: plx-sys-s3-name
      type: str
      isOptional: true
    - name: plx-data-s3-name
      type: str
      isOptional: true
  outputs:
    - name: destination
      type: image
  run:
    kind: job
    # environment:
    #   hostAliases:
    #   - ip: "172.16.1.33"
    #     hostnames:
    #     - "image.io"
    # init:
    # - connection: "{{ plx-sys-s3-name }}" 
    #   artifacts:
    #     #训练输出
    #     dirs: 
    #     - ["{{ job-uuid }}/outputs/", "{{ globals.artifacts_path }}/outputs/"]
    # - connection: "{{ plx-data-s3-name }}" 
    #   artifacts:
    #     #构建镜像的Dockerfile
    #     files:
    #     - ["dockerfile/Dockerfile", "{{ globals.artifacts_path }}/Dockerfile"]
    connections:
      - '{{ params.destination.connection }}'
    container:
      args:
        - '-c'
        - '{{ context }}'
        - '-d'
        - "{{ (connections[params.destination.connection].url + '/' + image-name + ':' + image-tag) }}"
        # - >-
        #   {{ (connections[params.destination.connection].url + '/' + destination)
        #   if (params.destination.connection in connections and
        #   connections[params.destination.connection].url) else destination }}
        - '--cache'
        - '--cache-ttl=6h'
        - '--skip-tls-verify=true'
        - '--insecure=true'
      image: gcr.io/kaniko-project/executor:latest
      imagePullPolicy: IfNotPresent
      name: polyaxon-main